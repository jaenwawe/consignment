https://github.com/goxr3plus/Ruby-on-Rails-eCommerce-Website/blob/master/app/models/user.rb


OrderItem.destroy_all
Order.destroy_all
Product.destroy_all
User.destroy_all


class User < ApplicationRecord
    has_many :products
    has_many :orders_items, through: :products
    has_many :orders, through: :orders_items


    has_secure_password
    validates :email, :password, presence: true

end


class CreateUsers < ActiveRecord::Migration[6.1]
  def change
    create_table :users do |t|
      t.string :first_name
      t.string :last_name
      t.string :store_name
      t.text :email, unique: true
      t.string :password_digest
      t.string :username, unique: true
      t.string :phone_number
      t.string :address
      t.string :state
      t.integer :zipcode
      t.string :gender
      t.boolean :sales2stores2
      t.boolean :retail_vender

      t.timestamps
    end
    add_index :users, :email, unique: true
  end
end

class UsersController < ApplicationController
    skip_before_action :confirm_authentication, only: [:create]
    before_action :set_user, only: [:show, :update, :destroy]
    
    def index    
      render json: User.all, each_serializer: UserIndexSerializer  
    end
  
    def show
      if current_user
         render json: current_user, status: :ok
      else
        not_current_user
      end 
    end




  
  
    # def show_else # where do custom methods go w/ authentication
    #   session[:page_views] ||= 0
    #   session[:page_views] += 1
      
    #   if session[:page_views] < 3
    #     found_user = User.find(params[:id])
    #     render json: found_user, status: :ok
    #   else
    #     render json: { error: "Maximum pageview limit reached" }, status: :unauthorized
    #   end
    # end
  
    
    
    def create
    new_user = User.new(user_params)
      if new_user.save
        session[:user_id] = new_user.id
        render json: new_user, status: :created
      else render json: new_user.errors.full_messages, status: :unprocessable_entity
      end
    end
      
      def update
      set_user
        if @user
        @user.update(user_params)
          if @user.valid?
            @user.save
            render json: @user
          else 
              not_found 
          end
        else        
        render json: {error: "Could not find index #{[:id]}"},  status: :unprocessable_entity 
        end      
      end
  
    def destroy
      set_user
      if @user
        @user.destroy
        render json: {message: "deleted"}, status: :ok
      else
        render json: {error: "Could not find index #{[:id]}"}
      end
    end
      
        
  
  private
        def user_params
          params.permit(:username, :password, :email, :first_name, :last_name, :phone_number, :address, :state, :zipcode)        
        end
        
        def not_current_user
          render json: { error: "Not authorized" }, status: :unauthorized
        end
  
        def not_found
          render :json => { :error => "user not found"}, :status => :not_found
            
        end
  
        def set_user
          @user = User.find(params[:id])
        end
      
      end
      
  







class UserSerializer < ActiveModel::Serializer
  attributes :id, :first_name, :last_name, :username, :email, :gender, :sales2stores2, :retail_vender
end


puts "Seed data"
users=[]
gender = ["M", "F"]
r=rand(1..50)
orders_items=[]
orders=[]
products=[]
type = [
    { "suit" => "https://tinyurl.com/6k2fmt3x"},
   {"shirt"=> "https://tinyurl.com/3mpkvr9u"},
    {"pants"=>"https://tinyurl.com/37mmaa97"}, 
    {"jacket"=>"https://tinyurl.com/8sycvdcv"} 
]

puts "Seeding users"

# generate 10 users
puts "Seeding users"

10.times do 
    u= User.create!(
    first_name: Faker::Name.unique.name,
    last_name:  Faker::Name.last_name,
    store_name: Faker::Company.name,
    email:  Faker::Internet.email,
    password: "abc123",
    username:  Faker::Twitter.screen_name,
    phone_number:  Faker::PhoneNumber.cell_phone,
    address: Faker::Address.street_address,
    state:  Faker::Address.state_abbr,
    zipcode:  Faker::Address.zip_code,
    gender: gender.sample,
    retail_vender: [true, false].sample
    )
    users<<u
end
    puts "Done seeding users"




class Product < ApplicationRecord
  belongs_to :user
  has_many :order_item
  has_many :order
end


class CreateProducts < ActiveRecord::Migration[6.1]
  def change
    create_table :products do |t|
      t.belongs_to :user
      t.string :category
      t.string :size
      t.integer :price
      t.integer :bid
      t.string :photo
      t.integer :review_stars
      t.text :review

      t.timestamps
    end
  end
end




class ProductSerializer < ActiveModel::Serializer
  attributes :id, :category, :size, :price, :bid, :photo, :review_stars, :review
  has_one :user
  has_one :order_item
end





    puts "Seeding products"
    10.times do 
        same = rand(0..3)
       p= Product.create!(
            user: users.sample,
            category: type[same].keys[0],
            size: rand(0..15),
            price: rand(10..50),
            bid:  rand(1..10),
            photo:  type[same].values[0],
            review_stars: rand(1..5),
            review: Faker::Restaurant.review  
       )
    products<<p
end
puts "Done seeding products"





class Order < ApplicationRecord
    belongs_to :order_items
end


class CreateOrders < ActiveRecord::Migration[6.1]
  def change
    create_table :orders do |t|
      t.belongs_to :order_item
      t.integer :total

      t.timestamps
    end
  end
end




puts "Seeding orders"
10.times do 
    o= Order.create!(
         order_item: order.sample,
         total: rand(10..150)
    )
 orders<<o
 end
 puts "Done seeding order"




class OrderSerializer < ActiveModel::Serializer
  attributes :id, :order_item_id, :total


class OrderItem < ApplicationRecord
  belongs_to :order
  belongs_to :products

  # has_one :order
  # has_one :product
end




class CreateOrderItems < ActiveRecord::Migration[6.1]
  def change
    create_table :order_items do |t|
      t.integer :order_id,
      t.belongs_to :product, null: false, foreign_key: true

      t.timestamps
    end
  end
end

end





puts "Seeding orders_items"
10.times do 
    oi= OrderItem.create!(
        session_id: users.sample,
        product:products.sample,
    )
orders_items<<oi
end

puts "Done seeding order_items"







class OrderItemSerializer < ActiveModel::Serializer
  attributes :id

end


puts "Done seeding Database 😁"


  get '/me', to: 'users#show'
  post '/signup', to: 'users#create'


	resources :users
  resources :products
  resources :orders
  resources :order_items
 


# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema.define(version: 2021_11_04_023609) do

  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "order_items", force: :cascade do |t|
    t.bigint "order_id", null: false
    t.bigint "product_id", null: false
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
    t.index ["order_id"], name: "index_order_items_on_order_id"
    t.index ["product_id"], name: "index_order_items_on_product_id"
  end

  create_table "orders", force: :cascade do |t|
    t.integer "order_item_id"
    t.integer "total"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end

  create_table "products", force: :cascade do |t|
    t.integer "user_id"
    t.string "category"
    t.string "size"
    t.integer "price"
    t.integer "bid"
    t.string "photo"
    t.integer "review_stars"
    t.text "review"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end

  create_table "users", force: :cascade do |t|
    t.string "first_name"
    t.string "last_name"
    t.string "store_name"
    t.text "email"
    t.string "password_digest"
    t.string "username"
    t.string "phone_number"
    t.string "address"
    t.string "state"
    t.integer "zipcode"
    t.string "gender"
    t.boolean "sales2stores2"
    t.boolean "retail_vender"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
    t.index ["email"], name: "index_users_on_email", unique: true
  end

  add_foreign_key "order_items", "orders"
  add_foreign_key "order_items", "products"
end




